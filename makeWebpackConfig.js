var path = require('path');
var fs = require('fs');
var webpack = require('webpack');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var ExtractTextPlugin = require("extract-text-webpack-plugin");


module.exports = function(options){

    var entry, plugins, cssLoaders;


    if(options.prod){
        entry =  [
            'babel-polyfill',
            "immutable",
            './src/js/app.js'
        ];
        cssLoaders = ExtractTextPlugin.extract('style-loader', 'css-loader!postcss-loader');
        plugins = [
            new HtmlWebpackPlugin({
                template: 'index.html', // Move the index.html file...
                minify: { // Minifying it while it is parsed
                    removeComments: true,
                    collapseWhitespace: true,
                    removeRedundantAttributes: true,
                    useShortDoctype: true,
                    removeEmptyAttributes: true,
                    removeStyleLinkTypeAttributes: true,
                    keepClosingSlash: true,
                    minifyJS: true,
                    minifyCSS: true,
                    minifyURLs: true
                },
                filename: 'built.html',
                inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
            }),
            new ExtractTextPlugin("dist/css/main.css"),
            new webpack.DefinePlugin({
                "process.env": {
                    NODE_ENV: JSON.stringify("production")
                }
            })
        ]
    }else{
        // development
        entry =  [
            'webpack-dev-server/client?http://localhost:8080',  //hot reloading
            'webpack/hot/only-dev-server',
            './src/js/app.js'
        ];
        cssLoaders = 'style-loader!css-loader!postcss-loader';
        plugins = [
            new webpack.HotModuleReplacementPlugin(), //hot loading
            new HtmlWebpackPlugin({
                template: 'index.html', // Move the index.html file
                inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
            })
        ];

    }

    //babel 将不需要的排除在外
    var exclude = fs.readdirSync(path.join(__dirname,'node_modules')).reduce(function(entries, dir){
        if(dir != 'rctui'){
            entries.push(path.join(__dirname,'node_modules',dir));
        }

        return entries
    },[])
    // css to be processed
    var cfg =  {
        entry: entry,
        output: {
            path: __dirname,
            filename: './dist/bundle.js'
        },

        module: {
            loaders:[
                {
                    test: /\.js$/,
                    loader: 'babel',
                   // exclude: path.join(__dirname,'/node_modules/'),
                    exclude:exclude,
                    query:
                    {
                        presets:['react']
                    }
                },
                {
                    test:   /\.css$/,
                    loader: cssLoaders
                }
            ]
        },

        plugins:plugins,

        postcss: function () {
            return [
                require('postcss-import')({ // Import all the css files...
                    glob: true,
                    root:'node_modules',
                    path:['node_modules','src/css'],
                    onImport: function (files) {
                        files.forEach(this.addDependency); // ...and add dependecies from the main.css files to the other css files...
                    }.bind(this) // ...so they get hot–reloaded when something changes...
                }),
                require('postcss-focus')(), // ...add a :focus to ever :hover...
                require('autoprefixer')({ // ...and add vendor prefixes...
                    browsers: ['last 2 versions', 'IE > 8'] // ...supporting the last 2 major browser versions and IE 8 and up...
                }),
                require('precss'),
                require('postcss-reporter')({ // This plugin makes sure we get warnings in the console
                    clearMessages: true
                })
            ];
        },

        target: "web", // Make web variables accessible to webpack, e.g. window
        stats: false, // Don't show stats in the console
        progress: true
    }

    if(!options.prod){
        cfg.devtool = 'eval';
    }

    return cfg;
}


